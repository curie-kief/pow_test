#include <iostream>
#include <string.h>
#include "pow_hash/cn_slow_hash.hpp"

int main(int argc, char **argv) 
{
	uint8_t hash[32];
	const uint8_t correct1[32] = { 0xeb, 0x14, 0xe8, 0xa8, 0x33, 0xfa, 0xc6, 0xfe, 0x9a, 0x43, 0xb5, 0x7b, 0x33, 0x67, 0x89, 0xc4, 
		0x6f, 0xfe, 0x93, 0xf2, 0x86, 0x84, 0x52, 0x24, 0x07, 0x20, 0x60, 0x7b, 0x14, 0x38, 0x7e, 0x11}; 
	const uint8_t correct2[32] = { 0x80, 0x47, 0x42, 0xcb, 0x8f, 0x59, 0xd8, 0x44, 0x6b, 0xc3, 0xc7, 0xc4, 0x39, 0x51, 0x4e, 0xc1,
		0xb8, 0xff, 0xce, 0x73, 0x4e, 0xc1, 0x43, 0xcc, 0x28, 0xa6, 0x83, 0x50, 0x75, 0xdc, 0x21, 0xcd };

	cn_pow_hash_v2 v2;
	v2.hash("", 0, hash);
	if(memcmp(hash, correct2, 32) == 0)
		printf("Hash B verified!\n");
	else
		printf("Hash B FAILED!\n");

	for(size_t i=0; i < 3; i++)
	{
		cn_pow_hash_v1 v1 = cn_pow_hash_v1::make_borrowed(v2);
		
		v1.hash("", 0, hash);
		if(memcmp(hash, correct1, 32) == 0)
			printf("Hash A verified!\n");
		else
			printf("Hash A FAILED!\n");
	}

	v2.hash("", 0, hash);
	if(memcmp(hash, correct2, 32) == 0)
		printf("Hash B verified!\n");
	else
		printf("Hash B FAILED!\n");
	
    return 0;
}
